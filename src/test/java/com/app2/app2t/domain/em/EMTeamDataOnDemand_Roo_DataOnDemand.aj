// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.app2.app2t.domain.em;

import com.app2.app2t.domain.em.EMTeam;
import com.app2.app2t.domain.em.EMTeamDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EMTeamDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EMTeamDataOnDemand: @Component;
    
    private Random EMTeamDataOnDemand.rnd = new SecureRandom();
    
    private List<EMTeam> EMTeamDataOnDemand.data;
    
    public EMTeam EMTeamDataOnDemand.getNewTransientEMTeam(int index) {
        EMTeam obj = new EMTeam();
        setCreatedBy(obj, index);
        setCreatedDate(obj, index);
        setStatus(obj, index);
        setTeamCode(obj, index);
        setTeamName(obj, index);
        setUpdatedBy(obj, index);
        setUpdatedDate(obj, index);
        return obj;
    }
    
    public void EMTeamDataOnDemand.setCreatedBy(EMTeam obj, int index) {
        String createdBy = "createdBy_" + index;
        obj.setCreatedBy(createdBy);
    }
    
    public void EMTeamDataOnDemand.setCreatedDate(EMTeam obj, int index) {
        Date createdDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedDate(createdDate);
    }
    
    public void EMTeamDataOnDemand.setStatus(EMTeam obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public void EMTeamDataOnDemand.setTeamCode(EMTeam obj, int index) {
        String teamCode = "teamCode_" + index;
        if (teamCode.length() > 15) {
            teamCode = teamCode.substring(0, 15);
        }
        obj.setTeamCode(teamCode);
    }
    
    public void EMTeamDataOnDemand.setTeamName(EMTeam obj, int index) {
        String teamName = "teamName_" + index;
        if (teamName.length() > 40) {
            teamName = teamName.substring(0, 40);
        }
        obj.setTeamName(teamName);
    }
    
    public void EMTeamDataOnDemand.setUpdatedBy(EMTeam obj, int index) {
        String updatedBy = "updatedBy_" + index;
        obj.setUpdatedBy(updatedBy);
    }
    
    public void EMTeamDataOnDemand.setUpdatedDate(EMTeam obj, int index) {
        Date updatedDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedDate(updatedDate);
    }
    
    public EMTeam EMTeamDataOnDemand.getSpecificEMTeam(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EMTeam obj = data.get(index);
        Long id = obj.getId();
        return EMTeam.findEMTeam(id);
    }
    
    public EMTeam EMTeamDataOnDemand.getRandomEMTeam() {
        init();
        EMTeam obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return EMTeam.findEMTeam(id);
    }
    
    public boolean EMTeamDataOnDemand.modifyEMTeam(EMTeam obj) {
        return false;
    }
    
    public void EMTeamDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = EMTeam.findEMTeamEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EMTeam' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EMTeam>();
        for (int i = 0; i < 10; i++) {
            EMTeam obj = getNewTransientEMTeam(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
